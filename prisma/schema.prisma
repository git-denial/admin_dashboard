datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model users {
  id                                    Int                      @id @default(autoincrement())
  full_name                             String                   @db.VarChar(200)
  email                                 String                   @unique(map: "email") @db.VarChar(200)
  password                              String                   @db.VarChar(100)
  salt                                  String                   @db.VarChar(100)
  birth_date                            DateTime?                @db.DateTime(0)
  weight                                Decimal?                 @db.Decimal(10, 0)
  height                                Decimal?                 @db.Decimal(10, 0)
  phone_num                             String?                  @db.VarChar(200)
  emergency_phone_num                   String?                  @db.VarChar(200)
  activation_token                      String                   @db.VarChar(200)
  activation_token_expired_at           DateTime                 @db.DateTime(0)
  password_reset_token                  String?                  @db.VarChar(200)
  password_reset_token_expired_at       DateTime?                @db.DateTime(0)
  verified                              Boolean                  @default(false)
  created_at                            DateTime                 @default(now()) @db.Timestamp(0)
  modified_at                           DateTime?                @default(now()) @db.Timestamp(0)
  chat                                  chat[]
  consultations                         consultations[]
  notifications                         notifications[]
  relative_notifications                relative_notifications[]
  relatives_relatives_user_emailTousers relatives[]              @relation("relatives_user_emailTousers")
  relatives_relatives_user_idTousers    relatives[]              @relation("relatives_user_idTousers")
  topup                                 topup[]
}

model administrators {
  id          Int       @id @default(autoincrement())
  username    String    @db.VarChar(200)
  password    String    @db.VarChar(100)
  salt        String    @db.VarChar(100)
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  modified_at DateTime? @db.Timestamp(0)
}

model cardiologists {
  id                              Int                  @id @default(autoincrement())
  doctor_id                       Int
  full_name                       String               @db.VarChar(200)
  email                           String               @unique(map: "email") @db.VarChar(200)
  password                        String               @db.VarChar(100)
  salt                            String               @db.VarChar(100)
  phone_num                       String?              @db.VarChar(200)
  bank_num                        String?              @db.VarChar(200)
  verified                        Boolean              @default(false)
  activation_token                String               @db.VarChar(200)
  activation_token_expired_at     DateTime             @db.DateTime(0)
  password_reset_token            String?              @db.VarChar(200)
  password_reset_token_expired_at DateTime?            @db.DateTime(0)
  created_at                      DateTime             @default(now()) @db.Timestamp(0)
  modified_at                     DateTime?            @default(now()) @db.Timestamp(0)
  chat                            chat[]
  consultations                   consultations[]
  notifications                   notifications[]
  withdrawal_request              withdrawal_request[]
}

model chat {
  id              Int           @id @default(autoincrement())
  consultation_id Int
  user_id         Int
  cardiologist_id Int
  ax              Int?
  message         String        @db.Text
  sender          chat_sender
  created_at      DateTime      @default(now()) @db.Timestamp(0)
  consultations   consultations @relation(fields: [consultation_id], references: [id], onUpdate: Restrict, map: "chat_ibfk_1")
  users           users         @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "chat_ibfk_2")
  cardiologists   cardiologists @relation(fields: [cardiologist_id], references: [id], onUpdate: Restrict, map: "chat_ibfk_3")

  @@index([cardiologist_id], map: "cardiologist_id")
  @@index([consultation_id], map: "consultation_id")
  @@index([user_id], map: "user_id")
}

model consultations {
  id              Int                  @id @default(autoincrement())
  user_id         Int
  cardiologist_id Int
  status          consultations_status @default(PENDING)
  payment         Decimal              @db.Decimal(10, 0)
  start_at        DateTime             @db.DateTime(0)
  end_at          DateTime?            @db.DateTime(0)
  created_at      DateTime             @default(now()) @db.Timestamp(0)
  modified_at     DateTime?            @default(now()) @db.Timestamp(0)
  chat            chat[]
  users           users                @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "consultations_ibfk_1")
  cardiologists   cardiologists        @relation(fields: [cardiologist_id], references: [id], onUpdate: Restrict, map: "consultations_ibfk_2")

  @@index([cardiologist_id], map: "cardiologist_id")
  @@index([user_id], map: "user_id")
}

model notifications {
  id              Int                @id @default(autoincrement())
  user_id         Int?
  cardiologist_id Int?
  message         String             @db.Text
  type            notifications_type
  created_at      DateTime           @default(now()) @db.Timestamp(0)
  users           users?             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_1")
  cardiologists   cardiologists?     @relation(fields: [cardiologist_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_2")

  @@index([cardiologist_id], map: "cardiologist_id")
  @@index([user_id], map: "user_id")
}

model relative_notifications {
  id         Int      @id @default(autoincrement())
  user_id    Int
  latitude   Float
  longitude  Float
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "relative_notifications_ibfk_1")

  @@index([user_id], map: "user_id")
}

model relatives {
  id                                Int       @id @default(autoincrement())
  full_name                         String    @db.VarChar(200)
  email                             String    @db.VarChar(200)
  user_email                        String    @db.VarChar(200)
  user_id                           Int
  password                          String    @db.VarChar(100)
  salt                              String    @db.VarChar(100)
  phone_num                         String?   @db.VarChar(200)
  verified                          Boolean   @default(false)
  verified_relative                 Boolean   @default(false)
  activation_token                  String    @db.VarChar(200)
  activation_token_expired_at       DateTime  @db.DateTime(0)
  password_reset_token              String?   @db.VarChar(200)
  password_reset_token_expired_at   DateTime? @db.DateTime(0)
  notification_token                String?   @db.VarChar(500)
  created_at                        DateTime  @default(now()) @db.Timestamp(0)
  modified_at                       DateTime? @default(now()) @db.Timestamp(0)
  users_relatives_user_emailTousers users     @relation("relatives_user_emailTousers", fields: [user_email], references: [email], onUpdate: Restrict, map: "relatives_ibfk_1")
  users_relatives_user_idTousers    users     @relation("relatives_user_idTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "relatives_ibfk_2")

  @@index([user_email], map: "user_email")
  @@index([user_id], map: "user_id")
}

model topup {
  id         Int      @id @default(autoincrement())
  user_id    Int
  amount     Decimal  @db.Decimal(10, 0)
  img_link   String   @db.Text
  approved   Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "topup_ibfk_1")

  @@index([user_id], map: "user_id")
}

model withdrawal_request {
  id               Int                        @id @default(autoincrement())
  cardiologist_id  Int
  requested_amount Decimal                    @db.Decimal(10, 0)
  payment_proof    String?                    @db.Text
  status           withdrawal_request_status?
  created_at       DateTime                   @default(now()) @db.Timestamp(0)
  cardiologists    cardiologists              @relation(fields: [cardiologist_id], references: [id], onUpdate: Restrict, map: "withdrawal_request_ibfk_1")

  @@index([cardiologist_id], map: "cardiologist_id")
}

enum consultations_status {
  PENDING
  EXAMINED
}

enum notifications_type {
  NORMAL
  EMERGENCY
}

enum withdrawal_request_status {
  GRANTED
  DENIED
}

enum chat_sender {
  USER
  CARDIOLOGIST
}
