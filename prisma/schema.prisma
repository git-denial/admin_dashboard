datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model users {
  id                                    Int                      @id @default(autoincrement())
  full_name                             String                   @db.VarChar(200)
  email                                 String                   @unique(map: "email") @db.VarChar(200)
  password                              String                   @db.VarChar(100)
  salt                                  String                   @db.VarChar(100)
  birth_date                            DateTime?                @db.DateTime(0)
  weight                                Decimal?                 @db.Decimal(10, 4)
  height                                Decimal?                 @db.Decimal(10, 4)
  phone_num                             String?                  @db.VarChar(200)  
  created_at                            DateTime                 @default(now()) @db.Timestamp(0)
  modified_at                           DateTime?                @default(now()) @db.Timestamp(0)
  chat                                  chat[]
  consultations                         consultations[]
}

model administrators {
  id          Int       @id @default(autoincrement())
  username    String    @db.VarChar(200)  @unique(map: "username")
  password    String    @db.VarChar(100)
  salt        String    @db.VarChar(100)
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  modified_at DateTime? @db.Timestamp(0)
}

model cardiologists {
  id                              Int                  @id @default(autoincrement())
  full_name                       String               @db.VarChar(200)
  email                           String               @unique(map: "email") @db.VarChar(200)
  password                        String               @db.VarChar(100)
  salt                            String               @db.VarChar(100)
  phone_num                       String?              @db.VarChar(200)
  created_at                      DateTime             @default(now()) @db.Timestamp(0)
  modified_at                     DateTime?            @default(now()) @db.Timestamp(0)
  chat                            chat[]
  consultations                   consultations[]
}

model chat {
  id              Int           @id @default(autoincrement())
  consultation_id Int
  user_id         Int
  cardiologist_id Int
  message         String        @db.Text
  sender          chat_sender
  created_at      DateTime      @default(now()) @db.Timestamp(0)
  consultations   consultations @relation(fields: [consultation_id], references: [id], onUpdate: Restrict, map: "chat_ibfk_1")
  users           users         @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "chat_ibfk_2")
  cardiologists   cardiologists @relation(fields: [cardiologist_id], references: [id], onUpdate: Restrict, map: "chat_ibfk_3")

  @@index([cardiologist_id], map: "cardiologist_id")
  @@index([consultation_id], map: "consultation_id")
  @@index([user_id], map: "user_id")
}

model consultations {
  id              Int                  @id @default(autoincrement())
  user_id         Int
  cardiologist_id Int
  status          consultations_status @default(PENDING)
  payment         Decimal              @db.Decimal(10, 0)
  start_at        DateTime             @db.DateTime(0)
  end_at          DateTime?            @db.DateTime(0)
  created_at      DateTime             @default(now()) @db.Timestamp(0)
  modified_at     DateTime?            @default(now()) @db.Timestamp(0)
  chat            chat[]
  users           users                @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "consultations_ibfk_1")
  cardiologists   cardiologists        @relation(fields: [cardiologist_id], references: [id], onUpdate: Restrict, map: "consultations_ibfk_2")

  @@index([cardiologist_id], map: "cardiologist_id")
  @@index([user_id], map: "user_id")
}

enum consultations_status {
  PENDING
  EXAMINED
}

enum notifications_type {
  NORMAL
  EMERGENCY
}

enum withdrawal_request_status {
  GRANTED
  DENIED
}

enum chat_sender {
  USER
  CARDIOLOGIST
}
